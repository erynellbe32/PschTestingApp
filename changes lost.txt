


/*
    $scope.questionraw = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,
        26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,
        55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,
        84,85,86,87,88,89];

*/



/*    
    $scope.random = function() {
        return 0.5 - Math.random();
    };

    $scope.abc = {};
    $scope.abc.ok = 'wat';

    var list_index = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,
    26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,
    55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,
    84,85,86,87,88,89];

    var j = 0;
    while(list_index.length > 0) {
        var i = Math.floor(list_index.length * Math.random());
      if (i >= list_index.length)
        i --;
        
      var val = list_index.splice(i, 1);
      $scope.testQuestions[j]._order = val[0];
      j ++;
    }

*/

// "st": {{"min":0},{"max":11}},





  /**
   * Reversing Values
   * @type {{choicea: number, choiceb: number, choicec: number, choiced: number, choicee: number, choicef: number, choiceg: number, choicei: number, choicej: number}}
   * ngShow and Nghide condition on Scope Data
   * -for Refactoring on reverse()
   */



 /*   $scope.tstQuest = testQuestions."raw";
    $scope.loadFromParent = function (tut) {
        alert('parent index = ' + tut);
    };
*/



    // Scope Subgroup refactor to Array Object
    // Could Be Refactored to Refer to Dim SCope Property
    // $scope.groupPointerArray = [ S1, S2 , S3 , S4 , S5 , S6 , S7 , S8 , S9 , S10 , S11 , S12 , S13 , S14 ];


    /*
    $scope.addToGroup = function(items) { // ngModel Function to sum instead of showing raw Value

        if testQuestions."raw" = groupPointerArray.find {        // test if array object's value == one value in pointerArray

            // TODO OPTIONS
            // X IndexOf link with with other .Indexof
            // X pair with other array
            // O instead of array use object
            // key value pair XXXXX

            // use NgInit for expression variable XXXX
            // use track by index

            // Nested NG REpeat - restructuring table with 2 Ngrepeat expressions
            // access parent child scopes
            // http://stackoverflow.com/questions/21453697/angularjs-access-parent-scope-from-child-controller

            // use ngrepeat generated $scope (inspect by ng-inspect and batarang) for sum loop.
            // use actual ngrepeat $scope for each loop for testQuestions $scope condition on group, push to array, then bind to dimension next page

            // Test Driven Dev showing NGshow and nghide nginit


            return testObject == testObject; // adding sub variables ?? then match to dimension?
            // TODO HOW TO KNOW OR CONNECT GROUP WITH DIMENSION??
            // x Linked to Values in mpqPriDims.rawGroup
            // x using groupsPointerArray
            // x use Filter LimitTo

            // NgInit function -  angular.forEach
            // refer to function inside data
            // push to scope

            $scope.rawGroup.push(group); // the push to rawGroup *appropiate Dimension array mpqPriDims.rawGroup
        }

    };
*/


/*
  /!**
   * TODO check sum values
   * @param values
   * @returns {*} Sum Total per S"raw"
   *!/

  $scope.getrawSum = function(values) {  // set function on NgRepeat on Results page
        return values // returns total parameter
          .map(function(x) { return x.raw; }) // maps length of array
          .reduce(function(a, b) { return a + b; });  // adds all array values
    };

*/


/*

    // TODO: For Removal once Run
    var values = {name: 'misko', gender: 'male'};
    var log = [];
    angular.forEach(values, function(value, key) {
        this.push(key + ': ' + value);
    }, log);
    expect(log).toEqual(['name: misko', 'gender: male']);



    $scope.addScore = function(s1) {
        $scope.S1s.push(s1);
        $scope.S1 = {};
    };


    // Steps in
    $scope.totalScore = function(){
        var total = 0;
        for(count=0;
            count<$scope.testQuestions.raw.length;
            count++)
            {
                total += $scope.s1[count].raw + $scope.s1[count].raw;
            }
        return total;
        };

//TODO FOR REMOVAL SUM
    $scope.sumByGender = function("raw") {
        // Here I need to sum by gender
        var total = 0;
        for (count = 0; count < $scope.users.length; count++) {
            if($scope.users[count]."raw" == "raw")
                total += $scope.users[count].age;
        }
        return total;
    }
});

*/


/*

//TODO: IDEAS- ngClick on forEach Object in testQuestions, add raw value to group class / ngModel

angular.forEach(testQuestions, function(value, key) {
    if testQuestions."raw" == .this array {
         $scope.sum"raw"s.push(item)
             }
    else ;
    return total;

*/



    //TODo Option 2 Ng-model expression
  /**
   *
   * @param items = ngmodel OR var inside ngrepeat
   * @returns {*}
   * map is like for each
   * reduce sums it up
   * HTML:
   *    <li ng-repeat="(key, value) in data | groupBy: 'Id'">
   *      "id": {{key}}, name: {{values[0].name}}, volume: {{getVolumeSum(values)}} </li>
   */





   
   


/* DEPRECATED - plain number only
    $scope.testValueraw = {
    "choicea": 1,
    "choiceb": 2,
    "choicec": 3,
    "choiced": 4,
    "choicee": 5,
    "choicef": 5,
    "choiceg": 4,
    "choicei": 2,
    "choicej": 1
    };
*/




  /**
   * Reversing Values
   * @type {{choicea: number, choiceb: number, choicec: number, choiced: number, choicee: number, choicef: number, choiceg: number, choicei: number, choicej: number}}
   * ngShow and Nghide condition on Scope Data
   * -for Refactoring on reverse()
   */



 /*   $scope.tstQuest = testQuestions."raw";
    $scope.loadFromParent = function (tut) {
        alert('parent index = ' + tut);
    };
*/

/*


    $scope.summerUpper = function (group,value) {
      .push(value).sumDimension.[(group)],

    };
    */

/* DEPRECATED - plain number only
    $scope.testValueraw = {
    "choicea": 1,
    "choiceb": 2,
    "choicec": 3,
    "choiced": 4,
    "choicee": 5,
    "choicef": 5,
    "choiceg": 4,
    "choicei": 2,
    "choicej": 1
    };
*/
    // Scope Subgroup refactor to Array Object
    // Could Be Refactored to Refer to Dim SCope Property
    // $scope.groupPointerArray = [ S1, S2 , S3 , S4 , S5 , S6 , S7 , S8 , S9 , S10 , S11 , S12 , S13 , S14 ];


    /*
    $scope.addToGroup = function(items) { // ngModel Function to sum instead of showing raw Value

        if testQuestions."raw" = groupPointerArray.find {        // test if array object's value == one value in pointerArray